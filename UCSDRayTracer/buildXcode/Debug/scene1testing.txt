# Test Scene 1 
# A simple quad viewed from different camera positions

size 640 480 
fileName scene1.ppm

# Now specify the camera.  This is what you should implement.
# This file has 4 camera positions.  Render your scene for all 4.

#camera 0 0 4 0 0 0 0 1 0 30
#camera 0 -3 3 0 0 0 0 1 0 30
#camera -4 0 1 0 0 1 0 0 1 45
camera -4 -4 4 1 0 0 0 1 0 30

# lighting/material definitions
# for initial testing, you should get the geometry right
# you may want to use dummy (constant) shading, ignoring these lines

maxverts 8

vertex -1 -1 -1
vertex +1 -1 -1 
vertex +1 +1 -1 
vertex -1 +1 -1 
vertex -1 -1 +1
vertex +1 -1 +1 
vertex +1 +1 +1
vertex -1 +1 +1

# The basic camera transform to return to for new parts

# The actual cube definition.  Since no instancing is supported, I will just 
# repeat this to create many cubes.  For extra credit, you can implement 
# instancing to make this simpler.  Alternatively, define a ray-cube 
# intersection test.

ambient 1 0 0

tri 0 1 5 
tri 0 5 4 
tri 3 7 6
tri 3 6 2
tri 1 2 6
tri 1 6 5 
tri 0 7 3 
tri 0 4 7 
tri 0 3 2 
tri 0 2 1
tri 4 5 6 
tri 4 6 7 
 

end

ambient 1 0 0 

# Now specify the geometry 
# Again, for initial testing, maybe you want to implement a dummy 
# ray-plane intersection routine, instead of reading this fully.
# Though it's probably simpler you just implement this, for later 
# parts of the assignment.

maxverts 4 

vertex -1 -1 0 
vertex +1 -1 0
vertex +1 +1 0
vertex -1 +1 0

translate 0.5 0 0 
rotate 0 0 0 45  
tri 0 1 2
tri 0 2 3

popTransform
